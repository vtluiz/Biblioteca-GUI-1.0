import sqlite3
import tkinter as tk
from tkinter import messagebox

# Função para conectar ao banco de dados e criar tabelas se não existirem
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    
    # Criação das tabelas
    cursor.execute('''CREATE TABLE IF NOT EXISTS Autores (
                        AutorID INTEGER PRIMARY KEY AUTOINCREMENT,
                        Nome TEXT NOT NULL,
                        Nacionalidade TEXT)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS Livros (
                        LivroID INTEGER PRIMARY KEY AUTOINCREMENT,
                        Titulo TEXT NOT NULL,
                        AutorID INTEGER NOT NULL,
                        AnoPublicacao INTEGER,
                        Genero TEXT,
                        FOREIGN KEY (AutorID) REFERENCES Autores (AutorID))''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS Emprestimos (
                        EmprestimoID INTEGER PRIMARY KEY AUTOINCREMENT,
                        LivroID INTEGER NOT NULL,
                        DataEmprestimo TEXT NOT NULL,
                        DataDevolucao TEXT,
                        NomeUsuario TEXT NOT NULL,
                        FOREIGN KEY (LivroID) REFERENCES Livros (LivroID))''')
    
    conn.commit()
    return conn, cursor

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    limpar_autor_form()

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    autor_id = entry_autor_id.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    limpar_livro_form()

# Função para adicionar empréstimo
def add_emprestimo():
    livro_id = entry_livro_id.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES (?, ?, ?, ?)',
                   (livro_id, data_emp, data_dev, usuario))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    limpar_emprestimo_form()

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro)

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar os livros mais emprestados
def view_mais_emprestados():
    conn, cursor = connect_db()
    cursor.execute('''
        SELECT Livros.Titulo, COUNT(Emprestimos.LivroID) AS TotalEmprestimos
        FROM Emprestimos
        JOIN Livros ON Emprestimos.LivroID = Livros.LivroID
        GROUP BY Emprestimos.LivroID
        ORDER BY TotalEmprestimos DESC
        LIMIT 5
    ''')
    livros = cursor.fetchall()
    conn.close()
    livros_mais_emprestados_list.delete(0, tk.END)
    for livro in livros:
        livros_mais_emprestados_list.insert(tk.END, f"{livro[0]} - {livro[1]} empréstimos")

# Funções para limpar os campos dos formulários
def limpar_autor_form():
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

def limpar_livro_form():
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_id.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)

def limpar_emprestimo_form():
    entry_livro_id.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor')
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor).grid(row=2, columnspan=2, pady=5)
tk.Button(frame_autor, text='Limpar', command=limpar_autor_form).grid(row=3, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro')
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='AutorID:').grid(row=1, column=0)
entry_autor_id = tk.Entry(frame_livro)
entry_autor_id.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano Publicação:').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro).grid(row=4, columnspan=2, pady=5)
tk.Button(frame_livro, text='Limpar', command=limpar_livro_form).grid(row=5, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='LivroID:').grid(row=0, column=0)
entry_livro_id = tk.Entry(frame_emprestimo)
entry_livro_id.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data Empréstimo:').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo).grid(row=4, columnspan=2, pady=5)
tk.Button(frame_emprestimo, text='Limpar', command=limpar_emprestimo_form).grid(row=5, columnspan=2, pady=5)

# Frame para visualizar dados
frame_visualizar = tk.LabelFrame(root, text='Visualizar Dados')
frame_visualizar.grid(row=0, column=1, rowspan=3, padx=10, pady=10)

livros_list = tk.Listbox(frame_visualizar, height=10, width=50)
livros_list.grid(row=0, column=0)

emprestimos_list = tk.Listbox(frame_visualizar, height=10, width=50)
emprestimos_list.grid(row=1, column=0)

livros_mais_emprestados_list = tk.Listbox(frame_visualizar, height=10, width=50)
livros_mais_emprestados_list.grid(row=2, column=0)

tk.Button(frame_visualizar, text='Ver Livros', command=view_livros).grid(row=0, column=1)
tk.Button(frame_visualizar, text='Ver Empréstimos', command=view_emprestimos).grid(row=1, column=1)
tk.Button(frame_visualizar, text='Ver Mais Emprestados', command=view_mais_emprestados).grid(row=2, column=1)

root.mainloop()
